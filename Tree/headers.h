/*
(c) 2022 Петров Михаил Вадимович группа 112
*/
#include <stdio.h>

typedef struct tree {
    char word[120];     // Слово
    int amount;         // Количество повторений
    struct tree* left;  // Левый потомок
    struct tree* right; // Правый потомок
} node;

node* add(char word[], node* tree);
// Добавляет слово word в дерево tree
// Ничего не возвращает
void treeprint(node* tree, FILE* fout);
// Выводит дерево tree
// Ничего не возвращает
int check_symbol(char c, char* syms, int size);
// Проверяет символ c на валидность в соотвествие с массивом разделителей syms
// Возвращает 1, если символ разделительный, иначе 0
char* strcat_(char* s1, char* s2); // Присоединяет s2 к s1, возвращает s1
char* strncat_(char* s1, char* s2, int n); // Присоединяет не более n символов s2 к s1, завершает строку символом '\0', возвращает s1
char* strcpy_(char* s1, char* s2); // Копирует строку s2 в строку s1, включая '\0', возвращает s1
char* strncpy_(char* s1, char* s2, int n); // Копирует не более n символов строки s2 в строку s1, возвращает s1;
char* strset_(char* s, char c); // Заполняет строку s символами, код которых равен значению c, возвращает указатель на строку s
char* strnset_(char* s, char c, int n); // Заменяет первые n символов строки s символами, код которых равен c, возвращает указатель на строку s
int strcmp_(char* s1, char* s2); // Сравнивает s1 и s2, возвращает значение 0, если строки эквивалентны
int strncmp_(char* s1, char* s2, int n); // Сравнивает не более n символов строк s1 и s2, возвращает значение 0, если начальные n символов строк эквивалентны
int strlen_(char* s); // Возвращает количество символов в строке s